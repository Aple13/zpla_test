managed;
//strict;
with draft;

define behavior for zpla_i_root alias Root
persistent table zpla_aroot
draft table zpla_droot
with additional save
//late numbering
lock master total etag LastChangedAt
authorization master ( instance )
//etag master LastChangedAt

{
  create;
  update;
  delete;
  association _Child1 { create; with draft; }
  association _Child2 { create; with draft; }
  association _Child3 { create; with draft; }


  field ( readonly ) CreatedBy, CreatedAt, LastChangedBy, LastChangedAt, LocalLastChangedAt;
  field ( mandatory ) Field1, Field2, Field3, Field4, Field5;
  field ( mandatory ) Field01, Field02, Field03, Field04, Field05;

  field ( numbering : managed, readonly ) RootUuid;


  mapping for zpla_aroot
  {
    RootUuid = root_uuid;
    Field1 = field_1;
    Field2 = field_2;
    Field3 = field_3;
    Field4 = field_4;
    Field5 = field_5;
    CreatedBy = created_by;
    CreatedAt = created_at;
    LastChangedBy = last_changed_by;
    LastChangedAt = last_changed_at;
    LocalLastChangedAt = local_last_changed_at;
  }

  mapping for zpla_atable1
  {
    Field1 = field_1;
    Field01 = field_01;
    Field02 = field_02;
    Field03 = field_03;
    Field04 = field_04;
    Field05 = field_05;
  }
}

define behavior for zpla_i_child1 alias Child1
implementation in class zbp_pla_i_child1 unique
persistent table zpla_achild1
draft table zpla_dchild1
//late numbering
lock dependent by _Root
authorization dependent by _Root
//etag master <field_name>
{
  update;
  delete;
  field ( readonly ) RootUuid;
  field ( numbering : managed, readonly ) Child1Uuid;
  association _Root { with draft; }

  mapping for zpla_achild1
  {
    RootUuid = root_uuid;
    Child1Uuid = child1_uuid;
    Field1 = field_1;
    Field2 = field_2;
    Field3 = field_3;
    Field4 = field_4;
    Field5 = field_5;
  }
}

define behavior for zpla_i_child2 alias Child2
implementation in class zbp_pla_i_child2 unique
persistent table zpla_achild2
draft table zpla_dchild2
//late numbering
lock dependent by _Root
authorization dependent by _Root
//etag master <field_name>
{
  update;
  delete;
  field ( readonly ) RootUuid;
  field ( numbering : managed, readonly ) Child2Uuid;
  association _Root { with draft; }

  mapping for zpla_achild2
  {
    RootUuid = root_uuid;
    Child2Uuid = child2_uuid;
    Field1 = field_1;
    Field2 = field_2;
    Field3 = field_3;
    Field4 = field_4;
    Field5 = field_5;
  }
}

define behavior for zpla_i_child3 alias Child3
implementation in class zbp_pla_i_child3 unique
persistent table zpla_achild3
draft table zpla_dchild3
//late numbering
lock dependent by _Root
authorization dependent by _Root
//etag master <field_name>
{
  update;
  delete;
  field ( readonly ) RootUuid;
  field ( numbering : managed, readonly ) Child3Uuid;
  association _Root { with draft; }

  mapping for zpla_achild3
  {
    RootUuid = root_uuid;
    Child3Uuid = child3_uuid;
    Field1 = field_1;
    Field2 = field_2;
    Field3 = field_3;
    Field4 = field_4;
    Field5 = field_5;
  }
}